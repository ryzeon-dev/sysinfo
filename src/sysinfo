#!/usr/bin/python3

import subprocess
from subprocess import getoutput as terminal
import argparse
import psutil

def remove(list, target):
    i = 0
    while i < len(list):
        if list[i] == target:
            list.pop(i)

        else:
            i += 1

    return list

def isIpv4(ip):
    if ':' in ip:
        return False

    ipsplit = ip.split('.')
    for octet in ipsplit:
        try:
            if int(octet) > 255:
                return False

        except:
            return False
    return True

def upTime():
    try:
        uptime = terminal('uptime -p').replace('up', '')
        uptime = uptime.replace(',', '')

        return green, uptime

    except:
        return None, None

def localUsers():
    try:
        users = terminal("uptime | awk -F ',' '{ print $2  }'").strip()
        return green, users
    
    except:
        return None, None
    
def totalRam():
    try:
        ram = terminal("cat /proc/meminfo | grep MemTotal | awk -F ':' '{ print $2 }' | "
                       "awk '{ printf \"%.2f GB\", $1 / 1024 / 1024 }'").strip()
        return ram
    
    except: 
        return None

def ramUsage():
    try:
        ramUsage = terminal("echo $(cat /proc/meminfo | grep MemTotal | awk -F ':' '{ print $2 }'  | "
                            "awk '{ print $1 }' && cat /proc/meminfo | grep MemAvailable | awk -F ':' '{ print $2 }' | "
                            "awk '{ print $1 }') | awk '{ printf \"%.2f%s\", ($1 - $2) / $1 * 100, \"%\" }'")

        color = green
        if float(ramUsage.replace('%', '').replace(',', '.')) > 75:
            color = red
        return color, ramUsage

    except:
        return None, None

def totalSwap():
    try:
        swap = terminal('cat /proc/meminfo | grep "SwapTotal" | awk \'{ printf "%.2f", $2 / 1024 / 1024 }\'') + ' GB'

        return swap
        
    except: 
        return None

def swapUsage():
    try:
        swap = terminal('echo $(cat /proc/meminfo | grep SwapTotal | awk \'{ print $2 }\' && cat /proc/meminfo | '
                         'grep SwapFree | awk \'{ print $2 }\') | awk \'{ printf "%d%s", $1 ? ($1 - $2) * 100'
                         ' / $1 : 0, "%" }\'')

        color = red if float(swap.replace('%', '').replace(',', '.')) > 80 else green
        return color, swap

    except: 
        return None, None

def totalStorage():
    try:
        storage = subprocess.getoutput('df -h / | grep /').split(' ')
        storage = remove(storage, '')
        return storage[1]
    
    except:
        return None

def usedStorage():
    try:
        storage = subprocess.getoutput('df -h / | grep /').split(' ')
        storage = remove(storage, '')
        storageUsage = storage[4]
        
        color = red if float(storageUsage[0:-1]) > 90 else green
        return color, storageUsage
    
    except:
        return None, None

def ipAddresses():
    try:
        ipAddress = terminal("echo $(ip a | grep inet -w | awk '{ print $2 }' | awk -F '/' '{ print $1 }') | "
                             "awk -F '127.0.0.1' '{ print $2 }'").strip()

        return ipAddress
    
    except:
        return None

def cpuUsage():
    try:
        cpuUsage = psutil.cpu_percent()

        color = red if cpuUsage > 85 else green
        return color, str(int(cpuUsage)) + '%'

    except:
        return None, None

def cpuTemperature():
    try:
        temperatures = psutil.sensors_temperatures()
        key = list(temperatures.keys())[0]

        cpuTemperature = temperatures[key][0].current

        color = red if int(cpuTemperature) > 75 else green
        return color, str(round(cpuTemperature)) + 'Â°C'

    except Exception as e:
        return None, None

def systemLoad():
    try:
        cpuLoad = (subprocess.getoutput('uptime')).split(' ')
        cpuLoad = remove(cpuLoad, '')

        index = cpuLoad.index('average:')
        cpuLoad = cpuLoad[index+1]

        cpuCount = subprocess.getoutput('grep -c processor /proc/cpuinfo')

        if cpuLoad[-1] == ',':
            cpuLoad = cpuLoad[0:-1]
        cpuLoad = cpuLoad.replace(',', '.')
        cpuLoad = float(cpuLoad)*100/int(cpuCount)
        color = red if float(cpuLoad) > 85 else green
        return color, str(int(cpuLoad)) + '%'

    except:
        return None, None

def processesCount():
    try:
        processes = subprocess.getoutput('ps axu')
        processes = processes.split('\n')

        return str(len(processes)-1) 
    except: 
        return None

def currentSession():
    try:
        session = subprocess.getoutput('tty')
        return session

    except:
        return None

def hostName():
    try:
        host = subprocess.getoutput('uname -n')
        return host

    except:
        return None

def kernel():
    try:
        kernel = subprocess.getoutput('uname -r')
        return kernel

    except:
        return None

def cachedRam():
    try:
        cached = subprocess.getoutput("cat /proc/meminfo | grep ^Cached | awk '{ print $2 }'")
        return str(int(int(cached)/1024)) + 'M'

    except:
        return None

def cachedSwap():
    try:
        cachedSw = subprocess.getoutput("cat /proc/meminfo | grep SwapCached | awk '{ print $2 }'")
        return str(int(int(cachedSw)/1024)) + 'M'

    except:
        return None

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Linux system analysis tool',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='Execution with no argument will display all info\nMore than one argument can be specified\nIf some value cannot be retreived, it won\'t be shown'
    )

    parser.add_argument('-ut', action='store_true', help='Up time')
    parser.add_argument('-lu', action='store_true', help='Local users')
    parser.add_argument('-ap', action='store_true', help='Active processes')
    parser.add_argument('-stu', action='store_true', help='Storage usage')
    parser.add_argument('-stt', action='store_true', help='Total storage')
    parser.add_argument('-ip', action='store_true', help='IP address')
    parser.add_argument('-ru', action='store_true', help='RAM usage')
    parser.add_argument('-rt', action='store_true', help='Total RAM')
    parser.add_argument('-su', action='store_true', help='Swap usage')
    parser.add_argument('-st', action='store_true', help='Total swap')
    parser.add_argument('-cu', action='store_true', help='CPU usage')
    parser.add_argument('-ct', action='store_true', help='CPU temperature')
    parser.add_argument('-sl', action='store_true', help='System load')
    parser.add_argument('-cs', action='store_true', help='Current session')
    parser.add_argument('-hn', action='store_true', help='Host name')
    parser.add_argument('-k',  action='store_true', help='Kernel')
    parser.add_argument('-cr', action='store_true', help='Cached RAM')
    parser.add_argument('-csw', action='store_true', help='Cached Swap')
    parser.add_argument('--pretty', action='store_true', help='When combined with options, shows them with full description')

    args = parser.parse_args()

    green = '\033[92m'
    red = '\033[91m'
    reset = '\033[00m'

    display = True
    
    if args.ut:
        display = False
        color, time = upTime()

        if time is not None:
            if args.pretty:
                print(f'Up time: {color}{time}{reset}')
            else:
                print(time)

    if args.lu:
        display = False
        color, users = localUsers()

        if users is not None:
            if args.pretty:
                print(f'Local users: {color}{users}{reset}')
            else:        
                print(users)

    if args.stu:
        display = False
        color, usage = usedStorage()

        if usage is not None:
            if args.pretty:
                print(f'Usage of /: {color}{usage}{reset} of {totalStorage()}')
            else:
                print(usage)

    if args.stt:
        display = False
        total = totalStorage()

        if total is not None:
            print(total)

    if args.ru:
        display = False
        color, usage = ramUsage()

        if usage is not None:
            if args.pretty:
                print(f'RAM usage: {color}{usage}{reset} of {totalRam()}')
            else:
                print(usage)

    if args.rt:
        display = False
        total = totalRam()

        if total is not None:
            print(total)

    if args.su:
        display = False
        color, usage = swapUsage()
        
        if usage is not None:
            if args.pretty:
                print(f'Swap usage: {color}{usage}{reset} of {totalSwap()}')
            else:
                print(usage)

    if args.st:
        display = False
        total = totalSwap()

        if total is not None:
            print(total)

    if args.cu:
        display = False
        color, usage = cpuUsage()

        if usage is not None:
            if args.pretty:
                print(f'CPU usage: {color}{usage}{reset}')
            else:        
                print(usage)

    if args.ct:
        display = False
        color, temperature = cpuTemperature()

        if temperature is not None:
            if args.pretty:
                print(f'CPU temperature: {color}{temperature}{reset}')
            else:
                print(temperature)

    if args.sl:
        display = False
        color, load = systemLoad()
        
        if load is not None:
            if args.pretty:
                print(f'System load: {color}{load}{reset}')
            else:
                print(load)

    if args.ap:
        display = False
        count = processesCount()

        if count is not None:
            if args.pretty:
                print(f'Active processes: {green}{count}{reset}')
            else:
                print(count)

    if args.cs:
        display = False
        session = currentSession()

        if session is not None:
            if args.pretty:
                print(f'Current session: {green}{session}{reset}')
            else:
                print(session)

    if args.cr:
        display = False
        cachedRAM = cachedRam()

        if cachedRAM is not None:
            if args.pretty:
                print(f'Cached RAM: {green}{cachedRAM}{reset}')
            else:
                print(cachedRAM)

    if args.ip:
        display = False
        ip = ipAddresses()

        if ip is not None:
            if args.pretty:
                print(f'IP address: {green}{ip}{reset}')
            else:
                print(ip)

    if args.csw:    
        display = False
        cachedSwap = cachedSwap()

        if cachedSwap is not None:
            if args.pretty:
                print(f'Cached swap: {green}{cachedSwap}{reset}')
            else:
                print(cachedSwap)

    if args.hn:
        display = False
        hostName = hostName()

        if hostName is not None:
            if args.pretty:
                print(f'Host name: {green}{hostName}{reset}')
            else:
                print(hostName)

    if args.k:
        display = False
        kernel = kernel()

        if hostName is not None:
            if args.pretty:
                print(f'Kernel: {green}{kernel}{reset}')
            else:
                print(kernel)
            
    if display:
        line = ''
        usersColor, users = localUsers()
        if users is not None:
            line += f'Local users: {usersColor}{users}{reset}\t\t'

        timeColor, uptime = upTime()
        if uptime is not None:
            line += f'Up time: {timeColor}{uptime}{reset}\t'

        session = currentSession()
        if session is not None:
            line += f'Current session: {green}{session}{reset}'

        if line:
            print(line)

        line = ''
        kernel = kernel()
        if kernel is not None:
            line += f'Kernel: {green}{kernel}{reset}\t\t'

        color, storageUsage = usedStorage()
        total = totalStorage()
        if storageUsage is not None:
            line += f'Usage of /: {green}{storageUsage}{reset} of {total}'

        if line:
            print(line)

        line = ''
        host = hostName()
        if host is not None:
            line += f'Host name: {green}{host}{reset}\t\t'

        ips = ipAddresses()
        if ips is not None:
            line += f'IP address: {green}{ips}{reset}'

        if line:
            print(line)

        line = ''
        ramColor, ramUsage = ramUsage()
        totalRam = totalRam()
        if ramUsage is not None:
             line += f'RAM usage: {ramColor}{ramUsage}{reset} of {totalRam}\t'

        cachedRAM = cachedRam()
        if cachedRAM is not None:
            line += f'Cached RAM: {green}{cachedRAM}{reset}'

        if line:
            print(line)

        line = ''
        swapColor, swapUsage = swapUsage()
        totalSwap = totalSwap()
        if swapUsage is not None:
            line += f'Swap usage: {swapColor}{swapUsage}{reset} of {totalSwap}\t'

        cachedSwap = cachedSwap()
        if cachedSwap is not None:
            line += f'Cached Swap: {green}{cachedSwap}{reset}'

        if line:
            print(line)

        line = ''
        cpuUsageColor, cpuUsage = cpuUsage()
        if cpuUsage is not None:
            line += f'CPU usage: {cpuUsageColor}{cpuUsage}{reset}\t\t\t'

        cpuTempColor, cpuTemp = cpuTemperature()
        if cpuTemp is not None:
            line += f'CPU temperature: {cpuTempColor}{cpuTemp}{reset}'

        if line:
            print(line)

        line = ''
        activeProcesses = processesCount()
        if activeProcesses is not None:
            line += f'Active processes: {green}{activeProcesses}{reset}\t\t'

        loadColor, load = systemLoad()
        if load is not None:
            line += f'System load: {loadColor}{load}{reset}'

        if line:
            print(line)
